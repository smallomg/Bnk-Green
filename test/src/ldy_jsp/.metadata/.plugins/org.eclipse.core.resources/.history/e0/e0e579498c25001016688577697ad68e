package ex12;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


import lombok.Data;

@Data
public class AccountDAO {
	// 1. 접속 객체(Connection) 제공
	public static Connection getConnection() {
		String driver = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@localhost:1521:testdb";
		String user = "green";
		String pw = "1234";

		Connection conn = null;

		try {
			Class.forName(driver);
			conn = DriverManager.getConnection(url, user, pw);

			if (conn != null) {
				System.out.println("DB 접속 성공....");
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return conn;
	}

	// 2. DAO에서 사용된 자원 해제(Connection,Statement,ResultSet)
	public static void close(Connection conn, PreparedStatement stmt, ResultSet rs) {
		try {
			rs.close();
			close(conn, stmt);
			System.out.println("rs 자원해제");
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	public static void close(Connection conn, PreparedStatement stmt) {
		try {
			stmt.close();
			conn.close();
			System.out.println("conn, stmt 자원해제");
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	public void transfer(String fromAccountId, String toAccountId, double amount) throws SQLException {
		Connection conn = null;
		PreparedStatement withdrawStmt = null;
		PreparedStatement depositStmt = null;

		try {
			conn = getConnection();
			conn.setAutoCommit(false); // 트랜잭션 시작
			//출금 계좌에서 금액 차감
			String withdrawSql = "UPDATE accounts SET balance = balance - ? WHERE account_id = ?";

			withdrawStmt = conn.prepareStatement(withdrawSql);
			withdrawStmt.setDouble(1, amount);
			withdrawStmt.setString(2, fromAccountId);
			int withdrawResult = withdrawStmt.executeUpdate();
			
			if(withdrawResult ==0) {
				throw new SQLException("계좌 부족");
			}
			
			
			//입금 계좌에서 금액 차감
			String depositSql = "UPDATE accounts SET balance = balance + ? WHERE account_id = ?";
			depositStmt = conn.prepareStatement(depositSql);
			depositStmt.setDouble(1, amount);
			depositStmt.setString(2, toAccountId);
			int depositResult = depositStmt.executeUpdate();

			if (depositResult == 0) {
				throw new SQLException("입금 계좌 없음");
			}

			conn.commit();
		} catch (SQLException e) {
			if (conn != null) {
				try {
					conn.rollback();
				} catch (SQLException ex) {
					ex.printStackTrace();
				}
			}
			throw e;
		} finally {
			if (withdrawStmt != null) {
				withdrawStmt.close();
			}
			if (depositStmt != null) {
				depositStmt.close();
			}
			if (conn != null) {
				conn.close();
			}
		}
	}

}
